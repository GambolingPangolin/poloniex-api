-- |
-- Module: Network.Poloniex
--
-- Entry point for the module
module Network.Poloniex (
    pxBaseUrl
  , returnTicker
  , return24hVolume
  , returnOrderBook
  , returnTradeHistory
  , returnChartData
  , returnCurrencies
  , returnLoanOrders
  , module Network.Poloniex.Types
  ) where

import           Data.Aeson             (Value)
import           Data.Map               (Map)
import           Data.Text              (Text)
import           Network.Poloniex.Api   (publicAPI)
import           Network.Poloniex.Types
import           Servant.API            ((:<|>) (..))
import           Servant.Client         (BaseUrl (..), ClientM, Scheme (Https),
                                         client)

-- | Api url
pxBaseUrl :: BaseUrl
pxBaseUrl = BaseUrl Https "poloniex.com" 443 ""

-- | Ticker data
returnTicker :: ClientM (Map Text Value)

-- | Volume data
return24hVolume :: ClientM (Map Text Value)

-- | Order book data
returnOrderBook ::
  Text -> -- ^ currency pair
  Maybe Int -> -- ^ depth
  ClientM Value
returnOrderBook cp i =
  returnOrderBook' (Just cp) i

-- autogenerated
returnOrderBook' ::
  Maybe Text ->
  Maybe Int ->
  ClientM Value

-- | Trade history data
returnTradeHistory ::
  Text -> -- ^ currency pair
  Maybe (Int, Int) -> -- ^ start & end timestamps
  ClientM [Value]
returnTradeHistory cp se =
  returnTradeHistory' (Just cp) (fst <$> se) (snd <$> se)

-- autogenerated
returnTradeHistory' ::
  Maybe Text ->
  Maybe Int ->
  Maybe Int ->
  ClientM [Value]

-- | Chart data
returnChartData ::
  Text -> -- ^ currency pair
  Period -> -- ^ period
  Int -> -- ^ start
  Int -> -- ^ end
  ClientM [Value]
returnChartData cp p s e =
  returnChartData' (Just cp) (Just p) (Just s) (Just e)

-- Chart data autogenerated function
returnChartData' ::
  Maybe Text ->
  Maybe Period ->
  Maybe Int ->
  Maybe Int ->
  ClientM [Value]

-- | Currencies
returnCurrencies ::
  ClientM (Map Text Value)

-- | Loan orders
returnLoanOrders ::
  Text ->
  ClientM Value
returnLoanOrders = returnLoanOrders' . Just

-- autogenerated
returnLoanOrders' ::
  Maybe Text ->
  ClientM Value

-- Generate the functions
returnTicker
  :<|> return24hVolume
  :<|> returnOrderBook'
  :<|> returnTradeHistory'
  :<|> returnChartData'
  :<|> returnCurrencies
  :<|> returnLoanOrders'
  = client publicAPI
